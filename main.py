import logging
import os
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from bd import insert_user, get_users, get_user_by_telegram_id, update_user, \
    insert_question, get_questions, delete_question_from_db, \
    update_question_in_db, update_answer_in_db, get_current_question  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
from states import Form, Questions, Tours

API_TOKEN = '7430055967:AAE_ptETbGQV1CT2RoeqTTFDV1N6flWzquY'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

DEFAULT_PHOTO = 'https://cs1e5a.4pda.ws/15550621.png'  # URL —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PHOTO_STORAGE_DIR = 'photos'  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ADMIN_ID = 868918195

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
if not os.path.exists(PHOTO_STORAGE_DIR):
    os.makedirs(PHOTO_STORAGE_DIR)


@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    users = get_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if not any(user[1] == user_id for user in users):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ telegram_id
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "–Ω–µ –∑–∞–ø–∏—Å–∞–Ω".
        insert_user(message.from_user.full_name, "–Ω–µ –∑–∞–ø–∏—Å–∞–Ω", "", None, telegram_id=user_id)
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(message, telegram_id=user_id)


async def show_user_profile(message: types.Message, edit_mode=False, telegram_id=None):
    user_info = get_user_by_telegram_id(telegram_id)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
    profile_text = (
        f"–ò–º—è: {user_info[2]}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info[3]}"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    inline_markup = types.InlineKeyboardMarkup()

    if not edit_mode:  # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        inline_markup.row(
            types.InlineKeyboardButton("‚úàÔ∏è –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏", callback_data="my_trips"),
            types.InlineKeyboardButton("‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
        )
        if telegram_id == ADMIN_ID:
            inline_markup.add(types.InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞", callback_data="admin"))
    else:  # –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        inline_markup.row(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–º—è", callback_data="edit_name"),
            types.InlineKeyboardButton("üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="edit_phone"),
            types.InlineKeyboardButton("üñºÔ∏è –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="edit_photo")
        )
        inline_markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="delete_photo")) \
            if user_info[5] is not None and user_info[5] != "Nophoto" else print()
        inline_markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å—é
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=open(user_info[5], 'rb') if user_info[5] and user_info[5] != "Nophoto" else DEFAULT_PHOTO,  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
        caption=profile_text,
        reply_markup=inline_markup
    )


async def check_admin_id_message(message: types.Message):
    return message.from_user.id == ADMIN_ID


async def check_admin_id_callback_query(callback_query: types.CallbackQuery):
    return callback_query.from_user.id == ADMIN_ID


@dp.callback_query_handler(lambda c: c.data == "back_to_profile")
async def back_to_profile(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    await callback_query.message.delete()
    # –í–µ—Ä–Ω–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_user_profile(callback_query.message, edit_mode=False, telegram_id=user_id)


@dp.callback_query_handler(lambda c: c.data == "edit_profile")
async def process_edit_profile(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.delete()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_user_profile(callback_query.message, edit_mode=True, telegram_id=callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == "my_trips")
async def process_my_trips(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –ø–æ–µ–∑–¥–∫–∏.")  # –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–µ–∑–¥–æ–∫.


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "edit_name")
async def edit_name(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_new_name.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.delete()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")


@dp.message_handler(state=Form.waiting_for_new_name)
async def process_new_name(message: types.Message, state: FSMContext):
    new_name = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–æ–≤–æ–µ –∏–º—è –≤ –ë–î
    update_user(user_id, name=new_name)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_user_profile(message, telegram_id=message.from_user.id, edit_mode=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º


@dp.callback_query_handler(lambda c: c.data == "edit_phone")
async def edit_phone(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_new_phone.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.delete()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@dp.message_handler(state=Form.waiting_for_new_phone)
async def process_new_phone(message: types.Message, state: FSMContext):
    new_phone = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ë–î
    update_user(user_id, phone_number=new_phone)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_user_profile(message, telegram_id=message.from_user.id, edit_mode=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º


@dp.callback_query_handler(lambda c: c.data == "edit_photo")
async def edit_photo(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_new_photo.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.delete()
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")


@dp.message_handler(state=Form.waiting_for_new_photo, content_types=types.ContentTypes.PHOTO)
async def process_new_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    photo_file = await bot.get_file(photo_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    new_photo_path = os.path.join(PHOTO_STORAGE_DIR, f'{user_id}_photo.png')  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await bot.download_file(photo_file.file_path, new_photo_path)

    # –°–æ—Ö—Ä–∞–Ω–∏–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–æ—Ç–æ –≤ –ë–î
    update_user(user_id, photo=new_photo_path)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_user_profile(message, telegram_id=message.from_user.id, edit_mode=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ


@dp.callback_query_handler(lambda c: c.data == "delete_photo")
async def delete_photo(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_info = get_user_by_telegram_id(user_id)

    if user_info and user_info[5]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
        photo_path = user_info[5]  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        update_user(user_id, photo="Nophoto")  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        if os.path.exists(photo_path):
            os.remove(photo_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        await callback_query.message.delete()
        await callback_query.message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞.")

        await show_user_profile(callback_query.message, telegram_id=callback_query.from_user.id, edit_mode=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —Ñ–æ—Ç–æ
    else:
        await callback_query.message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# ADMIN - –û–ë–©–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°
@dp.callback_query_handler(lambda c: c.data == "admin")
async def process_admin(callback_query: types.CallbackQuery):
    if check_admin_id_callback_query(callback_query):
        await bot.answer_callback_query(callback_query.id)  # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_markup = types.InlineKeyboardMarkup()
        admin_markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_statistics"))
        admin_markup.add(types.InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã-–û—Ç–≤–µ—Ç—ã", callback_data="admin_faq"))
        admin_markup.add(types.InlineKeyboardButton("‚úàÔ∏è –ü–æ–µ–∑–¥–∫–∏", callback_data="admin_trips"))
        admin_markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile"))

        await bot.send_message(callback_query.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_markup)


# ADMIN - –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–û–ü–†–û–°–´-–û–¢–í–ï–¢–´
async def admin_faq_2(callback_query_or_message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
    if isinstance(callback_query_or_message, types.CallbackQuery):
        await bot.answer_callback_query(callback_query_or_message.id)
        user_id = callback_query_or_message.from_user.id
    else:  # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        user_id = callback_query_or_message.from_user.id

    questions = get_questions()

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    faq_markup = types.InlineKeyboardMarkup()

    for record in questions:
        question_id, question, answer = record
        faq_markup.add(
            types.InlineKeyboardButton(f"‚úèÔ∏è {question[:10]} - {answer}", callback_data=f"edit_questions_{question_id}"),
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_question_{question_id}")
        )

    faq_markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="add_question"))
    faq_markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))

    await bot.send_message(user_id, "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:", reply_markup=faq_markup)


@dp.callback_query_handler(lambda c: c.data == "admin_faq")
async def admin_faq(callback_query_or_message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
    if isinstance(callback_query_or_message, types.CallbackQuery):
        await bot.answer_callback_query(callback_query_or_message.id)
        user_id = callback_query_or_message.from_user.id
    else:  # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        user_id = callback_query_or_message.from_user.id

    questions = get_questions()

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    faq_markup = types.InlineKeyboardMarkup()
    for record in questions:
        question_id, question, answer = record
        faq_markup.add(
            types.InlineKeyboardButton(f"‚úèÔ∏è {question[:10]} - {answer}", callback_data=f"edit_questions_{question_id}"),
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_question_{question_id}")
        )

    faq_markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="add_question"))
    faq_markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))

    await bot.send_message(user_id, "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:", reply_markup=faq_markup)


@dp.callback_query_handler(lambda c: c.data == "back_to_admin", state="*")
async def back_to_admin(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.answer_callback_query(callback_query.id)
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
    await process_admin(callback_query)


@dp.callback_query_handler(lambda c: c.data == "add_question")
async def add_question(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    await dp.current_state(user=callback_query.from_user.id).set_data({"action": "add"})


@dp.message_handler(state="*")
async def handle_new_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    print(user_data)

    if "action" in user_data and user_data["action"] == "add":
        question_text = message.text
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
        await state.update_data({"question": question_text, "action": "add_answer"})
    elif "action" in user_data and user_data["action"] == "add_answer":
        answer_text = message.text
        insert_question(user_data["question"], answer_text)
        await bot.send_message(message.from_user.id, "–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!")
        await admin_faq_2(message)
        await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

    elif "action" in user_data and user_data["action"] == "edit_question_text_":
        question_id = user_data["question_id"]
        new_question_text = message.text
        update_question_in_db(question_id, new_question_text)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await bot.send_message(message.from_user.id, "–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")

        await admin_faq(message)  # –í–µ—Ä–Ω–µ–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º
        await state.finish()

    elif "action" in user_data and user_data["action"] == "edit_answer_text_":
        question_id = user_data["question_id"]
        new_answer_text = message.text
        update_answer_in_db(question_id, new_answer_text)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await bot.send_message(message.from_user.id, "–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")

        await admin_faq(message)  # –í–µ—Ä–Ω–µ–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º
        await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith("edit_questions_"))
async def edit_question(callback_query: types.CallbackQuery):
    question_id = int(callback_query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute("SELECT question, answer FROM Questions WHERE id = ?", (question_id,))
    record = cursor.fetchone()
    connection.close()

    if record:
        current_question, current_answer = record

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
        edit_markup = types.InlineKeyboardMarkup()
        edit_markup.add(
            types.InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_question_text_{question_id}"),
            types.InlineKeyboardButton("üí¨ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"edit_answer_text_{question_id}"),

        )
        edit_markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_questions"))  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

        await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º? üòä", reply_markup=edit_markup)
    else:
        await bot.send_message(callback_query.from_user.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.callback_query_handler(lambda c: c.data.startswith("edit_question_text_"))
async def edit_question_text(callback_query: types.CallbackQuery):
    question_id = int(callback_query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    question = get_current_question(question_id)

    if question:
        current_question = question[0]
        await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:\n{current_question}")
        await dp.current_state(user=callback_query.from_user.id).set_data(
            {"action": "edit_question_text_", "question_id": question_id})
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ Questions.question")  # –û—Ç–ª–∞–¥–∫–∞
    else:
        await bot.send_message(callback_query.from_user.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.callback_query_handler(lambda c: c.data.startswith("edit_answer_text_"))
async def edit_answersss_text(callback_query: types.CallbackQuery):
    question_id = int(callback_query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute("SELECT answer FROM Questions WHERE id = ?", (question_id,))
    record = cursor.fetchone()
    connection.close()

    if record:
        current_answer = record[0]
        await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞:\n{current_answer}")
        await dp.current_state(user=callback_query.from_user.id).set_data(
            {"action": "edit_answer_text_", "question_id": question_id})
    else:
        await bot.send_message(callback_query.from_user.id, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == "back_to_questions")
async def back_to_questions(callback_query: types.CallbackQuery):
    await admin_faq(callback_query)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ admin_faq ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã


@dp.callback_query_handler(lambda c: c.data.startswith("delete_question_"))
async def delete_question(callback_query: types.CallbackQuery):
    question_id = int(callback_query.data.split("_")[-1])
    delete_question_from_db(question_id)
    await admin_faq_2(callback_query)


# ADMIN - –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–ï–ó–î–û–ö
@dp.callback_query_handler(lambda c: c.data == "admin_trips")
async def view_tours(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT id, departure_city, arrival_city, price, departure_time, trip_date, description, photo, published FROM Tours")
    records = cursor.fetchall()
    connection.close()

    if records:
        for record in records:
            tour_id, departure_city, arrival_city, price, departure_time, trip_date, description, photo, published = record

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–µ–∑–¥–∫–∏
            published_text = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if published else "‚ùå –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
            card = f"""
            üöå –ü–æ–µ–∑–¥–∫–∞ #
            **–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:** {departure_city}
            **–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:** {arrival_city}
            **–¶–µ–Ω–∞:** {price}$
            **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:** {departure_time}
            **–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏:** {trip_date}
            **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}
            {published_text}
            [![–§–æ—Ç–æ]({photo})]({photo})
            """
            await bot.send_message(callback_query.from_user.id, card, parse_mode='Markdown')

    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="add_tour")
    )

    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "add_tour")
async def add_tour(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                           "–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –¶–µ–Ω–∞, –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, "
                           "–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏, –û–ø–∏—Å–∞–Ω–∏–µ, –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ, –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ (–¥–∞/–Ω–µ—Ç)")

    await Tours.waiting_for_tour_info.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–µ–∑–¥–∫–µ


@dp.message_handler(state=Tours.waiting_for_tour_info)
async def process_add_tour(message: types.Message, state: FSMContext):
    data = message.text.split(", ")

    if len(data) != 8:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    departure_city, arrival_city, price, departure_time, trip_date, description, photo, published = data
    published = 1 if published.lower() == "–¥–∞" else 0  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ boolean

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute(
        "INSERT INTO Tours (departure_city, arrival_city, price, departure_time, trip_date, description, photo, published) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
        (departure_city, arrival_city, float(price), departure_time, trip_date, description, photo, published))
    connection.commit()
    connection.close()

    await message.reply("–ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    # –í–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–µ–∑–¥–æ–∫
    await view_tours(message)
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
