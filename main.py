import logging
import os
import sqlite3
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext, filters
from aiogram.utils import executor
from bd import insert_user, get_users, get_user_by_telegram_id, update_user, \
    insert_question, get_questions, delete_question_from_db, \
    update_question_in_db, update_answer_in_db, get_current_question, \
    insert_message_id, get_all_message_ids, delete_message_id  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
from states import Form, Questions, Tours, TourStates
from aiogram_timepicker.panel import FullTimePicker, full_timep_callback, full_timep_default
from aiogram_datepicker import Datepicker, DatepickerSettings
full_timep_default(
    # default labels
    label_up='‚á™', label_down='‚áì',
    hour_format='{0:02}h', minute_format='{0:02}m', second_format='{0:02}s'
)


async def delete_all_message(chat_id, user_id):
    for mes in get_all_message_ids(user_id):
        await bot.delete_message(chat_id, mes)


def clear_bd_message(user_id):
    for mes in get_all_message_ids(user_id):
        delete_message_id(mes)

API_TOKEN = '7430055967:AAE_ptETbGQV1CT2RoeqTTFDV1N6flWzquY'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

DEFAULT_PHOTO = 'https://cs1e5a.4pda.ws/15550621.png'  # URL —Ñ–æ—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PHOTO_STORAGE_DIR = 'photos'  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ADMIN_ID = 305636069
PHOTO_DIR = 'tour_photo'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
if not os.path.exists(PHOTO_STORAGE_DIR):
    os.makedirs(PHOTO_STORAGE_DIR)

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)


@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    users = get_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if not any(user[1] == user_id for user in users):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ telegram_id
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "–Ω–µ –∑–∞–ø–∏—Å–∞–Ω".
        insert_user(message.from_user.full_name, "–Ω–µ –∑–∞–ø–∏—Å–∞–Ω", "", None, telegram_id=user_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(message, telegram_id=user_id)


async def show_user_profile(message: types.Message, edit_mode=False, telegram_id=None):
    await delete_all_message(message.chat.id, message.from_user.id)
    clear_bd_message(message.from_user.id)
    user_info = get_user_by_telegram_id(telegram_id)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π
    profile_text = (
        f"–ò–º—è: {user_info[2]}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info[3]}"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    inline_markup = types.InlineKeyboardMarkup()

    if not edit_mode:  # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        inline_markup.row(
            types.InlineKeyboardButton("‚úàÔ∏è –ü–æ–µ–∑–¥–∫–∏", callback_data="my_trips"),
            types.InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq_questions")
        )
        inline_markup.add(types.InlineKeyboardButton("‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile"))
        if telegram_id == ADMIN_ID:
            inline_markup.add(types.InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞", callback_data="admin"))
    else:  # –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        inline_markup.row(
            types.InlineKeyboardButton("‚úèÔ∏è –ò–º—è", callback_data="edit_name"),
            types.InlineKeyboardButton("üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="edit_phone"),
            types.InlineKeyboardButton("üñºÔ∏è –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="edit_photo")
        )
        inline_markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="delete_photo")) \
            if user_info[5] is not None and user_info[5] != "Nophoto" else print()
        inline_markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å—é
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=open(user_info[5], 'rb') if user_info[5] and user_info[5] != "Nophoto" else DEFAULT_PHOTO,  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
        caption=profile_text,
        reply_markup=inline_markup
    )


@dp.callback_query_handler(lambda c: c.data == "faq_questions")
async def faq_questions(callback_query: types.CallbackQuery):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    cursor.execute("SELECT question, answer FROM Questions")
    records = cursor.fetchall()
    inline_markup = types.InlineKeyboardMarkup()
    inline_markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile"))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if records:
        faq_text = ""
        for index, (question, answer) in enumerate(records, start=1):
            faq_text += f"üìù *–í–æ–ø—Ä–æ—Å {index}:* {question}\nüó®Ô∏è *–û—Ç–≤–µ—Ç:* {answer}\n\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=faq_text,
            parse_mode="Markdown",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            reply_markup=inline_markup
        )
    else:
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        )

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    connection.close()


async def check_admin_id_message(message: types.Message):
    return message.from_user.id == ADMIN_ID


async def check_admin_id_callback_query(callback_query: types.CallbackQuery):
    return callback_query.from_user.id == ADMIN_ID


@dp.callback_query_handler(lambda c: c.data == "back_to_profile")
async def back_to_profile(callback_query: types.CallbackQuery):
    await delete_all_message(callback_query.message.chat.id, callback_query.from_user.id)
    clear_bd_message(callback_query.from_user.id)
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    await callback_query.message.delete()
    # –í–µ—Ä–Ω–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_user_profile(callback_query.message, edit_mode=False, telegram_id=user_id)


@dp.callback_query_handler(lambda c: c.data == "edit_profile")
async def process_edit_profile(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.delete()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_user_profile(callback_query.message, edit_mode=True, telegram_id=callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == "my_trips")
async def process_my_trips(callback_query: types.CallbackQuery):
    print("–í—ã–ø–æ–ª–Ω—è—é")
    await bot.answer_callback_query(callback_query.id)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT id, departure_city, arrival_city, price, departure_time, trip_date, description, photo, published FROM Tours WHERE published = 1")
    records = cursor.fetchall()
    connection.close()

    if records:
        for record in records:
            tour_id, departure_city, arrival_city, price, departure_time, trip_date, description, photo, published = record

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
            register_button = types.InlineKeyboardButton(text='üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data=f'register_for_trip_{tour_id}')

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(register_button)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–µ–∑–¥–∫–∏
            published_text = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if published else "‚ùå –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
            caption = (
                f"\n‚Ññ –ø–æ–µ–∑–¥–∫–∏: {tour_id}\n\n"
                f"\n‚úàÔ∏è –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_city if departure_city else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üåç –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {arrival_city if arrival_city else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üí∞ –¶–µ–Ω–∞: {price if price else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_time if departure_time else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {trip_date if trip_date else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            )

            mes = await bot.send_photo(
                chat_id=callback_query.from_user.id,
                photo=open(photo,
                           'rb') if photo else "https://steamuserimages-a.akamaihd.net/ugc/950726000575702194/E9862E658BDABDC2B3AD40338ADB7DA100C56004/?imw=512&imh=320&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true",
                caption=caption,
                reply_markup=keyboard
            )
            insert_message_id(mes.message_id, callback_query.from_user.id)
        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        back_keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_profile')
        back_keyboard.add(back_button)



        mes = await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="–≠—Ç–æ –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏.",
            reply_markup=back_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        )
        insert_message_id(mes.message_id, callback_query.from_user.id)
    else:
        mes = await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.")
        insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data.startswith("register_for_trip_"))
async def register_for_trip(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å id —Ç—É—Ä–∞ –∏–∑ callback_data
    tour_id = callback_query.data.split('_')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º tour_id

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('tour_bot.db')
    cursor = conn.cursor()

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è departure_city –∏ arrival_city
    cursor.execute('''
        SELECT departure_city, arrival_city FROM Tours WHERE id = ?;
    ''', (tour_id,))

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    result = cursor.fetchone()

    departure_city = result[0]  # –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    arrival_city = result[1]  # –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

    print(departure_city, arrival_city)
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
    message = (
        f"–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä ‚Ññ{tour_id}\n"
        f"{departure_city} - {arrival_city}?\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n"
        "1Ô∏è‚É£ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ –Ω–æ–º–µ—Ä—É: <–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞>\n"
        "2Ô∏è‚É£ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞"
    register_via_bot_button = types.InlineKeyboardButton(text='ü§ñ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞', callback_data=f'register_via_bot_{tour_id}')
    register_keyboard = types.InlineKeyboardMarkup()
    register_keyboard.add(register_via_bot_button)

    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text=message,
        reply_markup=register_keyboard
    )


@dp.callback_query_handler(lambda c: c.data.startswith("register_via_bot_"))
async def register_via_bot(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute("SELECT phone_number FROM Users WHERE telegram_id = ?", (user_id,))
    result = cursor.fetchone()
    connection.close()
    print(result)
    if result and result[0] and result[0] != '–Ω–µ –∑–∞–ø–∏—Å–∞–Ω':
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
        phone_number = result[0]
        await bot.send_message(callback_query.from_user.id,
                               f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ–µ–∑–¥–∫—É. –í–∞—à –Ω–æ–º–µ—Ä: {phone_number}. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
        await bot.send_message(ADMIN_ID, f"–ö –≤–∞–º –ó–∞–ø–∏—Å–∞–ª—Å—è —á–µ–ª–æ–≤–µ–∫ –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number}")
    else:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        enter_phone_button = types.InlineKeyboardButton(text='üìû –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                                                        callback_data='enter_phone_number')
        keyboard = types.InlineKeyboardMarkup().add(enter_phone_button)

        mes = await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n" + "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                               reply_markup=keyboard)
        insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == 'enter_phone_number')
async def enter_phone_number(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    mes = await bot.send_message(callback_query.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX")
    insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.message_handler(lambda message: message.text.startswith('+7') or message.text.startswith('8') and len(message.text) == 12)
async def save_phone_number(message: types.Message):
    phone_number = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute("INSERT OR REPLACE INTO Users (telegram_id, phone_number) VALUES (?, ?)", (user_id, phone_number))
    connection.commit()
    connection.close()

    mes = await bot.send_message(message.chat.id,
                           "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–µ–∑–¥–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞!")
    time.sleep(1)
    insert_message_id(mes.message_id, message.from_user.id)
    insert_message_id(message.message_id, message.from_user.id)

    await delete_all_message(message.chat.id, message.from_user.id)
    clear_bd_message(message.from_user.id)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "edit_name")
async def edit_name(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_new_name.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.delete()
    mes = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.message_handler(state=Form.waiting_for_new_name)
async def process_new_name(message: types.Message, state: FSMContext):
    new_name = message.text
    user_id = message.from_user.id

    insert_message_id(message.message_id, message.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–æ–≤–æ–µ –∏–º—è –≤ –ë–î
    update_user(user_id, name=new_name)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_user_profile(message, telegram_id=message.from_user.id, edit_mode=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º


@dp.callback_query_handler(lambda c: c.data == "edit_phone")
async def edit_phone(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_new_phone.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.delete()
    mes = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.message_handler(state=Form.waiting_for_new_phone)
async def process_new_phone(message: types.Message, state: FSMContext):
    new_phone = message.text
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ë–î
    update_user(user_id, phone_number=new_phone)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_user_profile(message, telegram_id=message.from_user.id, edit_mode=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º


@dp.callback_query_handler(lambda c: c.data == "edit_photo")
async def edit_photo(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.waiting_for_new_photo.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.delete()
    mes = await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
    insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.message_handler(state=Form.waiting_for_new_photo, content_types=types.ContentTypes.PHOTO)
async def process_new_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    photo_file = await bot.get_file(photo_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
    new_photo_path = os.path.join(PHOTO_STORAGE_DIR, f'{user_id}_photo.png')  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await bot.download_file(photo_file.file_path, new_photo_path)

    # –°–æ—Ö—Ä–∞–Ω–∏–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–æ—Ç–æ –≤ –ë–î
    update_user(user_id, photo=new_photo_path)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_user_profile(message, telegram_id=message.from_user.id, edit_mode=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ


@dp.callback_query_handler(lambda c: c.data == "delete_photo")
async def delete_photo(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_info = get_user_by_telegram_id(user_id)

    if user_info and user_info[5]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
        photo_path = user_info[5]  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        update_user(user_id, photo="Nophoto")  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        if os.path.exists(photo_path):
            os.remove(photo_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
        await callback_query.message.delete()
        await callback_query.message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞.")

        await show_user_profile(callback_query.message, telegram_id=callback_query.from_user.id, edit_mode=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —Ñ–æ—Ç–æ
    else:
        await callback_query.message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# ADMIN - –û–ë–©–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°
@dp.callback_query_handler(lambda c: c.data == "admin")
async def process_admin(callback_query: types.CallbackQuery):
    if check_admin_id_callback_query(callback_query):
        await bot.answer_callback_query(callback_query.id)  # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_markup = types.InlineKeyboardMarkup()
        admin_markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_statistics"))
        admin_markup.add(types.InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã-–û—Ç–≤–µ—Ç—ã", callback_data="admin_faq"))
        admin_markup.add(types.InlineKeyboardButton("‚úàÔ∏è –ü–æ–µ–∑–¥–∫–∏", callback_data="admin_trips"))
        admin_markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile"))

        await bot.send_message(callback_query.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_markup)


# ADMIN - –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–û–ü–†–û–°–´-–û–¢–í–ï–¢–´
async def admin_faq_2(callback_query_or_message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
    if isinstance(callback_query_or_message, types.CallbackQuery):
        await bot.answer_callback_query(callback_query_or_message.id)
        user_id = callback_query_or_message.from_user.id
    else:  # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        user_id = callback_query_or_message.from_user.id

    questions = get_questions()

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    faq_markup = types.InlineKeyboardMarkup()

    for record in questions:
        question_id, question, answer = record
        faq_markup.add(
            types.InlineKeyboardButton(f"‚úèÔ∏è {question[:10]} - {answer}", callback_data=f"edit_questions_{question_id}"),
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_question_{question_id}")
        )

    faq_markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="add_question"))
    faq_markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))

    mes = await bot.send_message(user_id, "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:", reply_markup=faq_markup)
    insert_message_id(mes.message_id, callback_query_or_message.from_user.id)


@dp.callback_query_handler(lambda c: c.data == "admin_faq")
async def admin_faq(callback_query_or_message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
    if isinstance(callback_query_or_message, types.CallbackQuery):
        await bot.answer_callback_query(callback_query_or_message.id)
        user_id = callback_query_or_message.from_user.id
    else:  # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        user_id = callback_query_or_message.from_user.id

    questions = get_questions()

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    faq_markup = types.InlineKeyboardMarkup()
    for record in questions:
        question_id, question, answer = record
        faq_markup.add(
            types.InlineKeyboardButton(f"‚úèÔ∏è {question[:10]} - {answer}", callback_data=f"edit_questions_{question_id}"),
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_question_{question_id}")
        )

    faq_markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="add_question"))
    faq_markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))

    mes = await bot.send_message(user_id, "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:", reply_markup=faq_markup)
    insert_message_id(mes.message_id, callback_query_or_message.from_user.id)


@dp.callback_query_handler(lambda c: c.data == "back_to_admin", state="*")
async def back_to_admin(callback_query: types.CallbackQuery, state: FSMContext):
    print("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥")

    await state.finish()
    await delete_all_message(callback_query.message.chat.id, callback_query.from_user.id)
    clear_bd_message(callback_query.from_user.id)

    await bot.answer_callback_query(callback_query.id)
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é



    await process_admin(callback_query)




@dp.callback_query_handler(lambda c: c.data == "add_question")
async def add_question(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    mes = await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
    insert_message_id(mes.message_id, callback_query.from_user.id)
    await dp.current_state(user=callback_query.from_user.id).set_data({"action": "add"})


@dp.callback_query_handler(lambda c: c.data.startswith("edit_questions_"))
async def edit_question(callback_query: types.CallbackQuery):
    question_id = int(callback_query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute("SELECT question, answer FROM Questions WHERE id = ?", (question_id,))
    record = cursor.fetchone()
    connection.close()

    if record:
        current_question, current_answer = record

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
        edit_markup = types.InlineKeyboardMarkup()
        edit_markup.add(
            types.InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_question_text_{question_id}"),
            types.InlineKeyboardButton("üí¨ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"edit_answer_text_{question_id}"),

        )
        edit_markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_questions"))  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

        mes = await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º? üòä", reply_markup=edit_markup)
        insert_message_id(mes.message_id, callback_query.from_user.id)
    else:
        mes = await bot.send_message(callback_query.from_user.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data.startswith("edit_question_text_"))
async def edit_question_text(callback_query: types.CallbackQuery):
    question_id = int(callback_query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    question = get_current_question(question_id)

    if question:
        current_question = question[0]
        mes = await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:\n{current_question}")
        insert_message_id(mes.message_id, callback_query.from_user.id)
        await dp.current_state(user=callback_query.from_user.id).set_data(
            {"action": "edit_question_text_", "question_id": question_id})
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ Questions.question")  # –û—Ç–ª–∞–¥–∫–∞
    else:
        await bot.send_message(callback_query.from_user.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.callback_query_handler(lambda c: c.data.startswith("edit_answer_text_"))
async def edit_answersss_text(callback_query: types.CallbackQuery):
    question_id = int(callback_query.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute("SELECT answer FROM Questions WHERE id = ?", (question_id,))
    record = cursor.fetchone()
    connection.close()

    if record:
        current_answer = record[0]
        mes = await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞:\n{current_answer}")
        insert_message_id(mes.message_id, callback_query.from_user.id)
        await dp.current_state(user=callback_query.from_user.id).set_data(
            {"action": "edit_answer_text_", "question_id": question_id})
    else:
        await bot.send_message(callback_query.from_user.id, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == "back_to_questions")
async def back_to_questions(callback_query: types.CallbackQuery):
    await delete_all_message(callback_query.message.chat.id, callback_query.from_user.id)
    clear_bd_message(callback_query.from_user.id)
    await admin_faq(callback_query)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ admin_faq ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã


@dp.callback_query_handler(lambda c: c.data.startswith("delete_question_"))
async def delete_question(callback_query: types.CallbackQuery):
    insert_message_id(callback_query.message.message_id, callback_query.from_user.id)
    await delete_all_message(callback_query.message.chat.id, callback_query.from_user.id)
    clear_bd_message(callback_query.from_user.id)
    question_id = int(callback_query.data.split("_")[-1])
    delete_question_from_db(question_id)
    await admin_faq_2(callback_query)


# ADMIN - –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–ï–ó–î–û–ö
@dp.callback_query_handler(lambda c: c.data == "admin_trips")
async def view_tours(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT id, departure_city, arrival_city, price, departure_time, trip_date, description, photo, published FROM Tours")
    records = cursor.fetchall()
    connection.close()

    if records:
        for record in records:
            tour_id, departure_city, arrival_city, price, departure_time, trip_date, description, photo, published = record

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–µ–∑–¥–∫–∏
            published_text = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ" if published else "‚ùå –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
            caption = (
                f"\n‚úàÔ∏è –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_city if departure_city else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üåç –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {arrival_city if arrival_city else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üí∞ –¶–µ–Ω–∞: {price if price else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_time if departure_time else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {trip_date if trip_date else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                f"üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {'–î–∞ ‚úÖ' if published else '–ù–µ—Ç ‚ùå'}"
            )

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            keyboard = types.InlineKeyboardMarkup()
            edit_button = types.InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'edit_tour_{tour_id}')
            delete_button = types.InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_tour_{tour_id}')
            keyboard.add(edit_button, delete_button)

            mes = await bot.send_photo(
                chat_id=callback_query.from_user.id,
                photo=open(photo, 'rb') if photo else "https://steamuserimages-a.akamaihd.net/ugc/950726000575702194/E9862E658BDABDC2B3AD40338ADB7DA100C56004/?imw=512&imh=320&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true",
                caption=caption,
                reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
            )
            insert_message_id(mes.message_id, callback_query.from_user.id)

    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="add_tour")
    )

    mes = await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data.startswith('edit_tour_'))
async def edit_tour(callback_query: types.CallbackQuery):
    await delete_all_message(callback_query.message.chat.id, callback_query.from_user.id)
    clear_bd_message(callback_query.from_user.id)
    tour_id = callback_query.data.split('_')[-1]  # –ü–æ–ª—É—á–∞–µ–º tour_id

    conn = sqlite3.connect('tour_bot.db')

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Tours WHERE id = ?", (tour_id,))
    tour_info = cursor.fetchone()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ caption
    caption = create_caption(tour_info)
    photo_path = os.path.join(PHOTO_DIR, f'tour_{tour_id}.jpg')  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞

    if not os.path.isfile(photo_path):
        photo_path = False

    mes = await bot.send_photo(
        chat_id=callback_query.from_user.id,
        photo=open(photo_path,
                   'rb') if photo_path else "https://steamuserimages-a.akamaihd.net/ugc/950726000575702194/E9862E658BDABDC2B3AD40338ADB7DA100C56004/?imw=512&imh=320&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true",
        caption=caption,
        reply_markup=generate_inline_keyboard(tour_id)
    )

    insert_message_id(mes.message_id, callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data.startswith('delete_tour_'))
async def delete_tour(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º tour_id –∏–∑ callback_data
    tour_id = callback_query.data.split('_')[-1]

    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('tour_bot.db')
    cursor = connection.cursor()

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–µ–∑–¥–∫–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É tour_id
    cursor.execute("DELETE FROM Tours WHERE id = ?", (tour_id,))
    connection.commit()
    connection.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
    await view_tours(callback_query)


# –í–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–µ–∑–¥–∫—É"
@dp.callback_query_handler(lambda c: c.data == "add_tour")
async def add_tour(callback_query: types.CallbackQuery):
    await delete_all_message(callback_query.message.chat.id, callback_query.from_user.id)
    clear_bd_message(callback_query.from_user.id)
    conn = sqlite3.connect('tour_bot.db')
    cursor = conn.cursor()

    cursor.execute('''
        INSERT INTO Tours (departure_city, arrival_city, price, departure_time, trip_date, description, photo, status, published) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', ("", "", 0.0, "", "", "", "", "", False))

    new_tour_id = cursor.lastrowid
    conn.commit()

    cursor.execute("SELECT * FROM Tours WHERE id = ?", (new_tour_id,))
    tour_info = cursor.fetchone()
    conn.close()

    caption = create_caption(tour_info)

    mes = await bot.send_photo(
        chat_id=callback_query.from_user.id,
        photo="https://steamuserimages-a.akamaihd.net/ugc/950726000575702194/E9862E658BDABDC2B3AD40338ADB7DA100C56004/?imw=512&imh=320&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true",
        caption=caption,
        reply_markup=generate_inline_keyboard(new_tour_id)
    )

    insert_message_id(mes.message_id, callback_query.from_user.id)


def create_caption(tour_info):
    if tour_info:
        departure_city, arrival_city, price, departure_time, trip_date, description, photo, status, published = tour_info[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ID
        caption = (
            f"\n‚úàÔ∏è –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_city if departure_city else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"üåç –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {arrival_city if arrival_city else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {price if price else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_time if departure_time else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {trip_date if trip_date else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {'–î–∞ ‚úÖ' if published else '–ù–µ—Ç ‚ùå'}"
        )

        return caption
    return "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."


def generate_inline_keyboard(tour_id):
    keyboard = types.InlineKeyboardMarkup()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π
    conn = sqlite3.connect('tour_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "SELECT departure_city, arrival_city, price, departure_time, trip_date, description, photo, published FROM Tours WHERE id = ?",
        (tour_id,))
    tour_info = cursor.fetchone()
    conn.close()

    fields = [
        ("–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", tour_info[0]),
        ("–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", tour_info[1]),
        ("–¶–µ–Ω–∞", tour_info[2]),
        ("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", tour_info[3]),
        ("–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏", tour_info[4]),
        ("–û–ø–∏—Å–∞–Ω–∏–µ", tour_info[5]),
        ("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ", tour_info[6]),
        ("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", '–î–∞' if tour_info[7] else '–ù–µ—Ç')
    ]

    call_data = [
        'departure-city',
        'arrival-city',
        'price',
        'departure-time',
        'trip-date',
        'description',
        'photo',
        'published'
    ]

    count = 0
    for field_name, field_value in fields:
        emoji = '‚úÖ' if field_value and field_value != "–ù–µ—Ç" else '‚ùå'
        button_text = f"{emoji} {field_name}"
        button = types.InlineKeyboardButton(text=button_text,
                                            callback_data=f"edit_field_{call_data[count]}_{tour_id}")
        keyboard.add(button)
        count += 1
        print(field_name, field_value)
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin"))
    return keyboard

# full timepicker usage
@dp.callback_query_handler(full_timep_callback.filter())
async def process_full_timepicker(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    user_data = await state.get_data()
    tour_id = user_data.get('tour_id')
    r = await FullTimePicker().process_selection(callback_query, callback_data)
    if r.selected:
        await callback_query.message.delete_reply_markup()

        conn = sqlite3.connect('tour_bot.db')
        cursor = conn.cursor()

        cursor.execute(f"UPDATE Tours SET {'departure_time'} = ? WHERE id = ?", (r.time.strftime("%H:%M"), tour_id))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Tours WHERE id = ?", (tour_id,))
        tour_info = cursor.fetchone()
        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ caption
        caption = create_caption(tour_info)
        photo_path = os.path.join(PHOTO_DIR, f'tour_{tour_id}.jpg')  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞

        if not os.path.isfile(photo_path):
            photo_path = False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        await bot.send_photo(
            chat_id=callback_query.from_user.id,
            photo=open(photo_path, 'rb') if photo_path else "https://steamuserimages-a.akamaihd.net/ugc/950726000575702194/E9862E658BDABDC2B3AD40338ADB7DA100C56004/?imw=512&imh=320&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true",
            caption=caption,
            reply_markup=generate_inline_keyboard(tour_id)
        )

        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ



@dp.callback_query_handler(lambda c: c.data.startswith("edit_field_"))
async def edit_field(callback_query: types.CallbackQuery, state: FSMContext):    # –ü–æ–ª—É—á–∞–µ–º tour_id –∏ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ callback_data
    field, tour_id = callback_query.data.split('_')[-2], callback_query.data.split('_')[-1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º tour_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(tour_id=tour_id)

    if field == 'departure-city':
        mes = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        insert_message_id(mes.message_id, callback_query.from_user.id)
        await TourStates.waiting_for_field_value.set()
        await state.update_data(field_name='departure_city')

    elif field == 'arrival-city':
        mes = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
        insert_message_id(mes.message_id, callback_query.from_user.id)
        await TourStates.waiting_for_field_value.set()
        await state.update_data(field_name='arrival_city')

    elif field == 'price':
        mes = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
        insert_message_id(mes.message_id, callback_query.from_user.id)
        await TourStates.waiting_for_field_value.set()
        await state.update_data(field_name='price')

    elif field == 'departure-time':
        mes = await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏: ",
            reply_markup=await FullTimePicker().start_picker()
        )
        insert_message_id(mes.message_id, callback_query.from_user.id)

    elif field == 'trip-date':
        mes = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:")
        insert_message_id(mes.message_id, callback_query.from_user.id)
        datepicker = Datepicker(_get_datepicker_settings())

        markup = datepicker.start_calendar()
        mes = await callback_query.message.answer('Select a date: ', reply_markup=markup)
        insert_message_id(mes.message_id, callback_query.from_user.id)
        await state.update_data(field_name='trip_date')

    elif field == 'description':
        mes = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        insert_message_id(mes.message_id, callback_query.from_user.id)
        await TourStates.waiting_for_field_value.set()
        await state.update_data(field_name='description')

    elif field == 'photo':
        mes = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ:")
        insert_message_id(mes.message_id, callback_query.from_user.id)
        await TourStates.waiting_for_photo.set()
        await state.update_data(field_name='photo')

    elif field == 'published':
        photo_path = os.path.join(PHOTO_DIR, f'tour_{tour_id}.jpg')  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞

        if not os.path.isfile(photo_path):
            photo_path = False
        conn = sqlite3.connect('tour_bot.db')

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
        cursor = conn.cursor()
        cursor.execute("SELECT published FROM Tours WHERE id = ?", (tour_id,))

        is_published = cursor.fetchone()[0]
        print(is_published)

        if is_published:
            cursor.execute(f"UPDATE Tours SET published = ? WHERE id = ?", (0, tour_id))
            conn.commit()
        else:
            cursor.execute(f"UPDATE Tours SET published = ? WHERE id = ?", (1, tour_id))
            conn.commit()

        cursor.execute("SELECT * FROM Tours WHERE id = ?", (tour_id,))
        tour_info = cursor.fetchone()
        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ caption
        caption = create_caption(tour_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        mes = await bot.send_photo(
            chat_id=callback_query.from_user.id,
            photo=open(photo_path, 'rb') if photo_path else "https://steamuserimages-a.akamaihd.net/ugc/950726000575702194/E9862E658BDABDC2B3AD40338ADB7DA100C56004/?imw=512&imh=320&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true",
            caption=caption,
            reply_markup=generate_inline_keyboard(tour_id)
        )
        insert_message_id(mes.message_id, callback_query.from_user.id)


DatepickerSettings(
    initial_view='day',  #available views -> day, month, year
    initial_date=datetime.now().date(),  #default date
    views={
        'day': {
            'show_weekdays': True,
            'weekdays_labels': ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
            'header': ['prev-year', 'days-title',  'next-year'],
            'footer': ['prev-month', 'select', 'next-month'], #if you don't need select action, you can remove it and the date will return automatically without waiting for the button select
            #available actions -> prev-year, days-title, next-year, prev-month, select, next-month, ignore
        },
        'month': {
            'months_labels': ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'],
            'header': [
                        ['prev-year', 'year', 'next-year'], #you can separate buttons into groups
                       ],
            'footer': ['select'],
            #available actions -> prev-year, year, next-year, select, ignore
        },
        'year': {
            'header': [],
            'footer': ['prev-years', 'next-years'],
            #available actions -> prev-years, ignore, next-years
        }
    },
    labels={
        'prev-year': '<<',
        'next-year': '>>',
        'prev-years': '<<',
        'next-years': '>>',
        'days-title': '{month} {year}',
        'selected-day': '{day} *',
        'selected-month': '{month} *',
        'present-day': '‚Ä¢ {day} ‚Ä¢',
        'prev-month': '<',
        'select': '–í—ã–±—Ä–∞—Ç—å',
        'next-month': '>',
        'ignore': ''
    },
    custom_actions=[] #some custom actions

)

def _get_datepicker_settings():
    return DatepickerSettings() #some settings


@dp.callback_query_handler(Datepicker.datepicker_callback.filter())
async def _process_datepicker(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    datepicker = Datepicker(_get_datepicker_settings())
    date = await datepicker.process(callback_query, callback_data)
    if date:
        user_data = await state.get_data()
        field_name = user_data.get('field_name')
        tour_id = user_data.get('tour_id')
        photo_path = os.path.join(PHOTO_DIR, f'tour_{tour_id}.jpg')  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞

        if not os.path.isfile(photo_path):
            photo_path = False

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
        conn = sqlite3.connect('tour_bot.db')
        cursor = conn.cursor()

        cursor.execute(f"UPDATE Tours SET {field_name} = ? WHERE id = ?", (date.strftime('%d.%m.%Y'), tour_id))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Tours WHERE id = ?", (tour_id,))
        tour_info = cursor.fetchone()
        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ caption
        caption = create_caption(tour_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        mes = await bot.send_photo(
            chat_id=callback_query.from_user.id,
            photo=open(photo_path, 'rb') if photo_path else "https://steamuserimages-a.akamaihd.net/ugc/950726000575702194/E9862E658BDABDC2B3AD40338ADB7DA100C56004/?imw=512&imh=320&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true",
            caption=caption,
            reply_markup=generate_inline_keyboard(tour_id)
        )
        insert_message_id(mes.message_id, callback_query.from_user.id)

        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await callback_query.answer()


@dp.message_handler(state=TourStates.waiting_for_field_value)
async def process_field_value(message: types.Message, state: FSMContext):
    insert_message_id(message.message_id, message.from_user.id)
    await delete_all_message(message.chat.id, message.from_user.id)
    clear_bd_message(message.from_user.id)
    user_data = await state.get_data()
    field_name = user_data.get('field_name')
    tour_id = user_data.get('tour_id')

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
    conn = sqlite3.connect('tour_bot.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ boolean
    if field_name == 'published':
        value = message.text.strip().lower() == '–¥–∞'
    else:
        value = message.text.strip()

    cursor.execute(f"UPDATE Tours SET {field_name} = ? WHERE id = ?", (value, tour_id))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Tours WHERE id = ?", (tour_id,))
    tour_info = cursor.fetchone()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ caption
    caption = create_caption(tour_info)

    photo_path = os.path.join(PHOTO_DIR, f'tour_{tour_id}.jpg')  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞

    if not os.path.isfile(photo_path):
        photo_path = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    mes = await bot.send_photo(
        chat_id=message.from_user.id,
        photo=open(photo_path, 'rb') if photo_path else "https://steamuserimages-a.akamaihd.net/ugc/950726000575702194/E9862E658BDABDC2B3AD40338ADB7DA100C56004/?imw=512&imh=320&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true",
        caption=caption,
        reply_markup=generate_inline_keyboard(tour_id)
    )
    insert_message_id(mes.message_id, message.from_user.id)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.message_handler(content_types=types.ContentType.PHOTO, state=TourStates.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    field_name = user_data.get('field_name')
    tour_id = user_data.get('tour_id')
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    file_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    photo = await bot.get_file(file_id)
    photo_file = await bot.download_file(photo.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ø–∞–ø–∫—É tour_photo
    photo_path = os.path.join(PHOTO_DIR, f'tour_{tour_id}.jpg')  # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    with open(photo_path, 'wb') as new_file:
        new_file.write(photo_file.getvalue())

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î
    conn = sqlite3.connect('tour_bot.db')
    cursor = conn.cursor()

    cursor.execute("UPDATE Tours SET photo = ? WHERE id = ?", (photo_path, tour_id))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
    cursor.execute("SELECT * FROM Tours WHERE id = ?", (tour_id,))
    tour_info = cursor.fetchone()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ caption
    caption = create_caption(tour_info)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    mes = await bot.send_photo(
        chat_id=message.from_user.id,
        photo=open(photo_path, 'rb'),  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        caption=caption,
        reply_markup=generate_inline_keyboard(tour_id)
    )
    insert_message_id(mes.message_id, message.from_user.id)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.message_handler(state="*")
async def handle_new_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    print(user_data)

    if "action" in user_data and user_data["action"] == "add":
        question_text = message.text
        mes = await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
        insert_message_id(mes.message_id, message.from_user.id)
        insert_message_id(message.message_id, message.from_user.id)
        await state.update_data({"question": question_text, "action": "add_answer"})
    elif "action" in user_data and user_data["action"] == "add_answer":
        answer_text = message.text
        insert_question(user_data["question"], answer_text)
        mes = await bot.send_message(message.from_user.id, "–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!")
        insert_message_id(mes.message_id, message.from_user.id)
        insert_message_id(message.message_id, message.from_user.id)
        await delete_all_message(message.chat.id, message.from_user.id)
        clear_bd_message(message.from_user.id)
        await admin_faq_2(message)
        await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

    elif "action" in user_data and user_data["action"] == "edit_question_text_":
        question_id = user_data["question_id"]
        new_question_text = message.text
        update_question_in_db(question_id, new_question_text)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        mes = await bot.send_message(message.from_user.id, "–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
        insert_message_id(mes.message_id, message.from_user.id)
        insert_message_id(message.message_id, message.from_user.id)
        await delete_all_message(message.chat.id, message.from_user.id)
        clear_bd_message(message.from_user.id)

        await admin_faq(message)  # –í–µ—Ä–Ω–µ–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º
        await state.finish()

    elif "action" in user_data and user_data["action"] == "edit_answer_text_":
        question_id = user_data["question_id"]
        new_answer_text = message.text
        update_answer_in_db(question_id, new_answer_text)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        mes = await bot.send_message(message.from_user.id, "–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
        insert_message_id(mes.message_id, message.from_user.id)
        insert_message_id(message.message_id, message.from_user.id)
        await delete_all_message(message.chat.id, message.from_user.id)
        clear_bd_message(message.from_user.id)

        await admin_faq(message)  # –í–µ—Ä–Ω–µ–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º
        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
